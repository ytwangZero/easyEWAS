} else {
paste0(input$outpath, "/", filename, ".pdf")
}
p <- dotplot(enres, x = "GeneRatio",
color = plotcolor,
decreasing = TRUE,
showCategory = showCategory)
ggsave(filename = file_name, plot = p)
}
file_name <- if (filename == "default") {
paste0(input$outpath, "/enrichdot.pdf")
} else {
paste0(input$outpath, "/", filename, ".pdf")
}
file_name
enres
plotcolor
showCategory
p <- dotplot(enres, x = "GeneRatio",
color = plotcolor,
decreasing = TRUE,
showCategory = showCategory)
p
enres
enres <- enrichGO(gene = gene,
OrgDb = org.Hs.eg.db,
ont=ont,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = pAdjustMethod,
qvalueCutoff = qvalueCutoff,
readable = TRUE)
enres@result -> input$enrichres
input$enrichres$GeneRatio = as.character(input$enrichres$GeneRatio)
input$enrichres$BgRatio = as.character(input$enrichres$BgRatio)
message("Starting result visualization ...")
if (plotType == "dot") {
file_name <- if (filename == "default") {
paste0(input$outpath, "/enrichdot.pdf")
} else {
paste0(input$outpath, "/", filename, ".pdf")
}
p <- dotplot(enres, x = "GeneRatio",
color = plotcolor,
decreasing = TRUE,
showCategory = showCategory)
ggsave(filename = file_name, plot = p)
}
barplot(enres, x = "Count",
color = plotcolor,
showCategory = showCategory)
p <- barplot(enres@result, x = "Count",
color = plotcolor,
showCategory = showCategory)
res <- easyEWAS::enrichEWAS(res,
filename = "default",
method = "GO",
filterP = "PVAL",
cutoff = 0.05,
ont = "BP",
pool = FALSE,
plot = TRUE,
plotType = "dot", # bar
plotcolor = "pvalue",
showCategory=NULL,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
qvalueCutoff = 0.2)
if(is.null(input$result)){
message("Error: No EWAS result file found.\n", NowTime)
}else{
subset(input$result, input$result[filterP] < cutoff, select = gene) %>%
as.data.frame() %>%
mutate(genename = sub(";.*$", "", gene)) %>%
dplyr::select(genename) %>%
filter(genename != "") -> enrichdata
message("It will take some time, please be patient...")
ddpcr::quiet(
gene.df <- bitr(enrichdata$genename,
fromType = "SYMBOL",
toType = c("ENTREZID"),
OrgDb = org.Hs.eg.db)
)
gene<-gene.df$ENTREZID
message("Start enrichment analysis ...")
if(method == "GO"){
enres <- enrichGO(gene = gene,
OrgDb = org.Hs.eg.db,
ont=ont,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = pAdjustMethod,
qvalueCutoff = qvalueCutoff,
readable = TRUE)
enres@result -> input$enrichres
input$enrichres$GeneRatio = as.character(input$enrichres$GeneRatio)
input$enrichres$BgRatio = as.character(input$enrichres$BgRatio)
}else if(method == "KEGG"){
enres <- enrichKEGG(gene = gene,
organism = "hsa",
pvalueCutoff = pvalueCutoff,
pAdjustMethod = pAdjustMethod,
qvalueCutoff = qvalueCutoff)
enres@result -> input$enrichres
}
outfile <- if (filename == "default") "enrichresult.csv" else paste0(filename, ".csv")
vroom::vroom_write(input$enrichres, file.path(input$outpath, outfile), delim = ",")
if (plot) {
message("Start result visualization ...")
if (plotType == "dot") {
file_name <- if (filename == "default") {
paste0(input$outpath, "/enrichdot.pdf")
} else {
paste0(input$outpath, "/", filename, ".pdf")
}
p <- dotplot(enres, x = "GeneRatio",
color = plotcolor,
decreasing = TRUE,
showCategory = showCategory)
ggsave(filename = file_name, plot = p)
}
if (plotType == "bar") {
file_name <- if (filename == "default") {
paste0(input$outpath, "/enrichbar.pdf")
} else {
paste0(input$outpath, "/", filename, ".pdf")
}
p <- barplot(enres, x = "Count",
color = plotcolor,
showCategory = showCategory)
ggsave(filename = file_name, plot = p)
}
}
lubridate::now()  -> NowTime
message(paste0("Enrichment analysis has been completed !\nYou can find results in ",input$outpath, ".\n", NowTime))
tictoc::toc()
return(input)
}
message("Error: No EWAS result file found.\n", NowTime)
stop("Error: No EWAS result found in 'input$result'.\nTime: ", NowTime)
stop("No EWAS result found in 'input$result'.\nTime: ", NowTime)
enrichdata
stop("No genes passed the filtering threshold (", filterP, " < ", cutoff, ").")
message("Converting gene symbols to Entrez IDs...")
ddpcr::quiet(
gene.df <- bitr(enrichdata$genename,
fromType = "SYMBOL",
toType = c("ENTREZID"),
OrgDb = org.Hs.eg.db)
)
message("Gene symbol conversion completed. ", nrow(gene.df), " genes mapped.")
message("Gene symbol conversion completed, and ", nrow(gene.df), " genes mapped.")
gene.df
subset(input$result, input$result[filterP] < cutoff, select = gene)
enrichdata
dim(enrichdata)
gene
# 假设 result 是 EWAS 的结果表
sig_genes <- res$result %>%
filter(PVAL < 0.05) %>%     # 或用 FDR、Bonferroni 等
pull(gene) %>%
strsplit(split = ";") %>%
unlist() %>%
unique() %>%
.[. != ""]                  # 去除空字符串
sig_genes
enrichdata
gene.df
gene<-gene.df$ENTREZID
enres <- enrichGO(gene = gene,
OrgDb = org.Hs.eg.db,
ont=ont,
pvalueCutoff = pvalueCutoff,
pAdjustMethod = pAdjustMethod,
qvalueCutoff = qvalueCutoff,
readable = TRUE)
?enrichGO
message("Gene symbol conversion completed, and ", nrow(gene.df), " genes mapped.")
enres@result -> input$enrichres
input$enrichres$GeneRatio = as.character(input$enrichres$GeneRatio)
input$enrichres$BgRatio = as.character(input$enrichres$BgRatio)
enres
R.utils::setOption("clusterProfiler.download.method","auto")
enres <- enrichKEGG(gene = gene,
organism = "hsa",
pvalueCutoff = pvalueCutoff,
pAdjustMethod = pAdjustMethod,
qvalueCutoff = qvalueCutoff)
options(timeout = 180)
enres <- enrichKEGG(gene = gene,
organism = "hsa",
pvalueCutoff = pvalueCutoff,
pAdjustMethod = pAdjustMethod,
qvalueCutoff = qvalueCutoff)
enres <- enrichKEGG(gene = gene,
organism = "hsa",
pvalueCutoff = pvalueCutoff,
pAdjustMethod = pAdjustMethod,
qvalueCutoff = qvalueCutoff)
enres@result -> input$enrichres
as.character(input$enrichres$GeneRatio)
enres
as.character(input$enrichres$BgRatio)
dotplot(enres, x = "GeneRatio",
color = plotcolor,
decreasing = TRUE,
showCategory = showCategory)
?dotplot
p <- enrichplot::dotplot(enres, x = "GeneRatio",
color = plotcolor,
decreasing = TRUE,
showCategory = showCategory)
p
?dotplot
?dotplot
message("Start result visualization ...")
# Determine output file name suffix based on plot type
suffix <- switch(plotType,
"dot" = "enrichdot.pdf",
"bar" = "enrichbar.pdf",
{
warning("Invalid plotType. Choose 'dot' or 'bar'. Skipping plot.")
return(input)
})
# Compose the full file name
file_name <- file.path(input$outpath,
if (filename == "default") suffix else paste0(filename, ".pdf"))
file_name
plotType
dotplot(enres,
x = "GeneRatio",
color = plotcolor,
showCategory = showCategory,
font.size = 10)
?dotplot
enrichplot::barplot(enres,
x = "Count",
color = plotcolor,
showCategory = showCategory)
?barplot
barplot(enres,
x = "Count",
color = plotcolor,
showCategory = showCategory)
?barplot
dotplot(enres,
x = "GeneRatio",       # x 轴用基因比例
color = "p.adjust",    # 点的颜色表示调整后的 p 值
showCategory = 20)     # 展示前 20 个通路
plotcolor
enres@result$pvalue
dotplot(enres,
x = "GeneRatio",
color = plotcolor,
showCategory = showCategory,
font.size = 10)
?dotplot
plotcolor = "p.adjust"
dotplot(enres,
x = "GeneRatio",
color = plotcolor,
showCategory = showCategory,
font.size = 10)
dotplot(enres,
x = "GeneRatio",       # x 轴用基因比例
color = "p.adjust",    # 点的颜色表示调整后的 p 值
showCategory = 20)     # 展示前 20 个通路
dotplot(enres,
x = "GeneRatio",
color = plotcolor,
showCategory = showCategory)
plotcolor
showCategory
dotplot(enres,
x = "GeneRatio",       # x 轴用基因比例
color = plotcolor,    # 点的颜色表示调整后的 p 值
showCategory = 20)     # 展示前 20 个通路
dotplot(enres,
x = "GeneRatio",       # x 轴用基因比例
color = plotcolor,    # 点的颜色表示调整后的 p 值
showCategory = showCategory)     # 展示前 20 个通路
# Generate the appropriate plot
p <- switch(plotType,
"dot" = dotplot(enres,
x = "GeneRatio",
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = "Count",
color = plotcolor,
showCategory = showCategory)
)
p
showCategory
showCategory=10
# Generate the appropriate plot
p <- switch(plotType,
"dot" = dotplot(enres,
x = "GeneRatio",
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = "Count",
color = plotcolor,
showCategory = showCategory)
)
p
barplot(enres,
x = "Count",
color = plotcolor,
showCategory = showCategory)
barplot(enres,
x = "GeneRatio",
color = plotcolor,
showCategory = showCategory)
Count
barplot(enres,
x = "Count",
color = plotcolor,
showCategory = showCategory)
p
# Generate the appropriate plot
pdf(file = file_name, width = 11, height = 7)
file_name
p <- switch(plotType,
"dot" = dotplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory)
)
x = "GeneRatio"
p <- switch(plotType,
"dot" = dotplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory)
)
dev.off()
dev.off()
dev.off()
# Generate the appropriate plot
pdf(file = file_name, width = 11, height = 7)
p <- switch(plotType,
"dot" = dotplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory)
)
dev.off()
# Generate the appropriate plot
p <- switch(plotType,
"dot" = dotplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory)
)
# Save the plot to file
ggsave(filename = file_name, plot = p, width = 11, height = 6)
message("Plot saved to: ", file_name)
# Generate the appropriate plot
pdf(file = file_name, width = 11, height = 7)
p <- switch(plotType,
"dot" = dotplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory)
)
print(p)
dev.off()
?pdf
width = 11
height = 11
source("D:/myweb/easyEWAS/R/enrichEWAS.R")
res <- enrichEWAS(res,
filename = "default",
method = "GO",
filterP = "PVAL",
cutoff = 0.05,
ont = "BP",
pool = FALSE,
plot = TRUE,
plotType = "dot", # bar
plotcolor = "pvalue",
showCategory=10,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
qvalueCutoff = 0.2)
res <- enrichEWAS(res,
filename = "default",
method = "GO",
filterP = "PVAL",
cutoff = 0.05,
ont = "BP",
pool = FALSE,
plot = TRUE,
width = 11,
height = 11,
plotType = "dot", # bar
plotcolor = "pvalue",
showCategory=10,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
qvalueCutoff = 0.2)
width
height
# Determine output file name suffix based on plot type
suffix <- switch(plotType,
"dot" = "enrichdot.pdf",
"bar" = "enrichbar.pdf",
{
warning("Invalid plotType. Choose 'dot' or 'bar'. Skipping plot.")
return(input)
})
# Compose the full file name
file_name <- file.path(input$outpath,
if (filename == "default") suffix else paste0(filename, ".pdf"))
# Generate the appropriate plot
pdf(file = file_name, width = width, height = height)
p <- switch(plotType,
"dot" = dotplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory),
"bar" = barplot(enres,
x = x,
color = plotcolor,
showCategory = showCategory)
)
print(p)
dev.off()
message("Plot saved to: ", file_name)
detach("package:easyEWAS", unload = TRUE, character.only = TRUE)
source("D:/myweb/easyEWAS/R/enrichEWAS.R")
res <- enrichEWAS(res,
filename = "default",
method = "GO",
filterP = "PVAL",
cutoff = 0.05,
ont = "BP",
pool = FALSE,
plot = TRUE,
width = 11,
height = 11,
plotType = "dot", # bar
plotcolor = "pvalue",
showCategory=10,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
qvalueCutoff = 0.2)
source("D:/myweb/easyEWAS/R/enrichEWAS.R")
res <- enrichEWAS(res,
filename = "default",
method = "GO",
filterP = "PVAL",
cutoff = 0.05,
ont = "BP",
pool = FALSE,
plot = TRUE,
width = 11,
height = 11,
plotType = "dot", # bar
plotcolor = "pvalue",
showCategory=10,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
qvalueCutoff = 0.2)
res <- enrichEWAS(res,
filename = "default",
method = "GO",
filterP = "PVAL",
cutoff = 0.05,
ont = "BP",
pool = FALSE,
plot = TRUE,
width = 11,
height = 7,
plotType = "dot", # bar
plotcolor = "pvalue",
showCategory=10,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
qvalueCutoff = 0.2)
library(devtools)
setwd("D:/myweb/easyEWAS") # no web
load_all()
document()
detach("package:easyEWAS", unload = TRUE, character.only = TRUE)
remove.packages("easyEWAS")
remotes::install_github("ytwangZero/easyEWAS")
remotes::install_github("ytwangZero/easyEWAS")
library(easyEWAS)
rm(list = ls())
detach("package:easyEWAS", unload = TRUE, character.only = TRUE)
library(easyEWAS)
